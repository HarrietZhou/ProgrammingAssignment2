m
m<-matrix(1:4,ncol=2,nrow=2,rbind(m))
m
dimnames(m)<-list(c("a","b"),c(c,d))
dimnames(m)<-list(c("a","b"),c("c","d"))
m
cbind(m)
m<-matrix(1:4,ncol=2,nrow=2,rbind(m))
m
m<-matrix(1:4,ncol=2,nrow=2,cbind(m))
m
m<-matrix(1:4,ncol=2,nrow=2)
m
m<-matrix(1:4,ncol=2,nrow=2,cbind(m))
m
m<-matrix(1:4,ncol=2,nrow=2)
m
m<-matrix(1:4,ncol=2,nrow=2,cbind(m))
m
above10<-function(x){nc<-ncol(x);means<-numeric(nc);for(i in 1:nc){means[i]<-mean(x[,i])}means}
x<-list(foo=1:4,bar=0.6)
x
x[foo]
x["foo"]
x[[foo]]
x[["foo"]]
x$foo
x$"foo"
x[1]
x[2]
x[[1]]
x[[2]]
x[1,2]
x[c(1,2)]
x[1:2]
x[[1,2]]
x
name<-foo
name<-"foo"
x[1]
x$name
x[["name"]]
x<-list(foo=1:4,bar=0.6)
x
name<-"foo"
x[name]
x[[name]]
x$name
x[foo]
x["foo"]
x[[foo]]
x[["foo"]]
x[[c(1,2)]]
x[c(1,2)]
x[[1 and 2]]
x[[1]][[3]]
x[[1]][[2]]
x[1][3]
x[1][2]
x[[1][[2]]]
x[[1]][[2]]
x<-list(harriet=1:5,lee=1:6)
x
x[1:2]
x[[1:2]]
x[[1,2]]
x[c(1,2)]
x[[c(1,2)]]
x$harriet
x[["Harriet"]]
x[["lee"]]
x$lee
pace<-lee
pace<-"lee"
x$pace
x[[pace]]
x[pace]
x[[1]][[4]]
x[[2]][[3]]
x[[c(2,3)]]
x[c(2,3)]
x<-c("a","b","c","d")
for(i in seq_along(x)){print(x[i])}
for(i in 1:4){pring(x[i])}
for(i in 1:4){print(x[i])}
for(letter in x){print(letter)}
for(i in 1:4)print(x[i])
help(seq_along)
z<-10
seq_along(z)
seq_len(z)
x<-matrix(1:6,2,3)
x
for(i in seq_len(nrow(x))){for(j in seq_len(ncol(x)){print(x[i,j])}}
for(i in seq_len(nrow(x))){for(j in seq_len(ncol(x))){print(x[i,j])}}
for(i in seq_len(nrow(x))){for(j in seq_len(ncol(x))){print(x[i.j])}}
for(i in seq_len(nrow(x))){for(j in seq_len(ncol(x))){print(x[i,j])}}
x<-0
while(x<10){print(x);x<x+1}
x<-0
while(x<10){print(x);x<x+1}
x<-0
while(x<10){print(x);x<-x+1}
for(x in 1:10){print(x);x<-x+1}
for(x in 1:10){print(x);x<x+1}
while(x<10){print(x);x<x+1}
x<-0
for(x in 1:10){print(x);x<x+1}
x<-0
while(x<10){print(x);x<x+1}
f<-function(a,b=1,c=2,d=NULL){}
f<-function(a,b){a^2}
f(2)
f<-function(a,b){print(a);print(b)}
f(45)
f<-function(a,b){print(a)print(b)}
f<-function(a,b){print(a)ï¼Œprint(b)}
myplot<-function(x,y,type="1",...){plot(x,y,type=type,...)}
mean
args(paste)
args(cat)
args(paste)
paste("a","b",sep=":")
paste("a","b",se=":")
search()
f<-function(x,y){x^2+y/z}
lm<-function(x{x*x})
lm
lm<-function(x){x*x}
lm
a=1
b=2
f<-function(x){a*x+b}
f(x)
f(2)
g<-function(x){a=1,b=2,f(x)}
g<-function(x){a=1;b=2;f(x)}
g(2)
make.power<-function(n){pow<-function(x){x^n};pow}
make.power(2)
make.power(2,1)
cube<-make.power(3)
square<-make.power(2)
cube(3)
square(3)
ls(environment(cube))
get("n",environment(cube))
ls(environment(square))
get("n",environment(square))
y<-10
f<-function(x){y<-2;y^2+g(x)}
g<-function(x){x*y}
f(3)
g<-function(x){}
g<-function(x){a<-3;x+a+y}
g(2)
x<-1:10
if(x>5){x<-0}
cube<-function(x,n){x^3}
cube(3)
f<-function(x){g<-function(y){y+z};z<-4;x+g(x)}
z<-10
f(3)
x<-5
y<-if(x<3){NA}else{10}
y
g<-function(x){a<-3'x+a+y'}
g<-function(x){a<-3;x+a+y}
g(2)
y<-3
g(2)
mean(x)
x<-c()
mean(x)
x<-
mean(x)
mean(X)
mean(y)
mean(z)
mean(l)
mean(A)
mean(a)
mean(b)
mean(c)
mean(d)
mean(X)
traceback()
lm(y-x)
lm(X-l)
lm(l-x)
traceback()
debug(lm)
lm(y-x)
debug(lm)
lm(l-X)
library(datasets)
data(iris)
?iris
x<-data.frame(iris)
x
subset(x,"Species"==virginica)
subset(x,"Species"=="virginica")
x[102:150,]
x2<-x[102:150,]
mean(x2[["Sepal.Length"]])
apply(iris[,1:4],2,mean)
colMeans(iris)
rowMeans(iris[,1:4])
apply(iris,2,mean)
library(datasets)
data(mtcars)
x<-data.frame(mtcars)
x
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
library(dataset)
library(datasets)
data(iris)
y<-data.frame(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
y2<-y[101:150,]
mean(y2[["Sepal.Length"]])
a<-26.66364
b<-15.10000
a-b
debug(ls)
ls(l)
with(mtcars,tapply(mpg,cyl,mean))
with(mtcars,tapply(hp,cyl,mean))
x<-c(with(mtcars,tapply(hp,cyl,mean)))
x
as.list(x)
x$8-x$4
x[3]-x[4]
x[3]-x[1]
help(rm)
help(cat)
help(mean)
help(solve)
source("cachematrix.R")
amatrix=makeCacheMartix(matrix(c(1,2,3,4),nrow=2,ncol=2))
amatrix=makeCacheMatrix(matrix(c(1,2,3,4),nrow=2,ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$set(matrix(c(0,5,99,66),nrow=2,ncol=2))
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$getinverse()
